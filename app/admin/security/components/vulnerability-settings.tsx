import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { AlertCircle, CheckCircle2, Clock } from "lucide-react";
import type { SecuritySettings } from "@/app/lib/types";

interface VulnerabilitySettingsProps {
  initialSettings?: SecuritySettings["vulnerabilitySettings"];
}

export function VulnerabilitySettings({ initialSettings }: VulnerabilitySettingsProps) {
  const [settings, setSettings] = useState(initialSettings || {
    enableScheduledScan: true,
    scanSchedule: "weekly" as const,
    scanTime: "00:00",
    scanTargets: {
      webapp: true,
      api: true,
      database: true,
      server: true,
    },
    notifyOnCompletion: true,
    notifyOnVulnerability: true,
    severityThreshold: "medium" as const,
    autoRemediation: false,
  });

  const [scanStatus, setScanStatus] = useState({
    isRunning: false,
    progress: 0,
    lastScan: "2024-02-28 10:00:00",
    vulnerabilities: [
      {
        id: "CVE-2024-1234",
        severity: "high",
        description: "SQLインジェクションの脆弱性",
        status: "open",
      },
      {
        id: "CVE-2024-5678",
        severity: "medium",
        description: "クロスサイトスクリプティングの脆弱性",
        status: "fixed",
      },
    ],
  });

  const handleSave = async () => {
    try {
      // TODO: API呼び出しを実装
      console.log("Settings saved:", settings);
    } catch (error) {
      console.error("Failed to save settings:", error);
    }
  };

  const handleStartScan = async () => {
    try {
      setScanStatus({ ...scanStatus, isRunning: true, progress: 0 });
      // TODO: 実際のスキャン処理を実装
      // 進捗をシミュレート
      const interval = setInterval(() => {
        setScanStatus((prev) => {
          if (prev.progress >= 100) {
            clearInterval(interval);
            return { ...prev, isRunning: false };
          }
          return { ...prev, progress: prev.progress + 10 };
        });
      }, 1000);
    } catch (error) {
      console.error("Failed to start scan:", error);
      setScanStatus({ ...scanStatus, isRunning: false });
    }
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity) {
      case "critical":
        return "destructive";
      case "high":
        return "destructive";
      case "medium":
        return "warning";
      case "low":
        return "secondary";
      default:
        return "default";
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>脆弱性診断設定</CardTitle>
        <CardDescription>
          定期的な脆弱性診断のスケジュールと診断範囲を設定します。
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <Label htmlFor="enableScheduledScan">定期スキャンを有効にする</Label>
          <Switch
            id="enableScheduledScan"
            checked={settings.enableScheduledScan}
            onCheckedChange={(checked) =>
              setSettings({ ...settings, enableScheduledScan: checked })
            }
          />
        </div>

        {settings.enableScheduledScan && (
          <>
            <div className="space-y-2">
              <Label htmlFor="scanSchedule">スキャンスケジュール</Label>
              <Select
                value={settings.scanSchedule}
                onValueChange={(value) =>
                  setSettings({ ...settings, scanSchedule: value })
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="daily">毎日</SelectItem>
                  <SelectItem value="weekly">毎週</SelectItem>
                  <SelectItem value="monthly">毎月</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="scanTime">スキャン実行時刻</Label>
              <Input
                id="scanTime"
                type="time"
                value={settings.scanTime}
                onChange={(e) =>
                  setSettings({ ...settings, scanTime: e.target.value })
                }
              />
            </div>
          </>
        )}

        <div className="space-y-2">
          <Label>スキャン対象</Label>
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="webapp"
                checked={settings.scanTargets.webapp}
                onCheckedChange={(checked) =>
                  setSettings({
                    ...settings,
                    scanTargets: {
                      ...settings.scanTargets,
                      webapp: checked as boolean,
                    },
                  })
                }
              />
              <Label htmlFor="webapp">Webアプリケーション</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox
                id="api"
                checked={settings.scanTargets.api}
                onCheckedChange={(checked) =>
                  setSettings({
                    ...settings,
                    scanTargets: {
                      ...settings.scanTargets,
                      api: checked as boolean,
                    },
                  })
                }
              />
              <Label htmlFor="api">API</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox
                id="database"
                checked={settings.scanTargets.database}
                onCheckedChange={(checked) =>
                  setSettings({
                    ...settings,
                    scanTargets: {
                      ...settings.scanTargets,
                      database: checked as boolean,
                    },
                  })
                }
              />
              <Label htmlFor="database">データベース</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox
                id="server"
                checked={settings.scanTargets.server}
                onCheckedChange={(checked) =>
                  setSettings({
                    ...settings,
                    scanTargets: {
                      ...settings.scanTargets,
                      server: checked as boolean,
                    },
                  })
                }
              />
              <Label htmlFor="server">サーバー</Label>
            </div>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="severityThreshold">通知する重要度のしきい値</Label>
          <Select
            value={settings.severityThreshold}
            onValueChange={(value) =>
              setSettings({ ...settings, severityThreshold: value })
            }
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="critical">重大</SelectItem>
              <SelectItem value="high">高</SelectItem>
              <SelectItem value="medium">中</SelectItem>
              <SelectItem value="low">低</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label htmlFor="notifyOnCompletion">
              スキャン完了時に通知する
            </Label>
            <Switch
              id="notifyOnCompletion"
              checked={settings.notifyOnCompletion}
              onCheckedChange={(checked) =>
                setSettings({ ...settings, notifyOnCompletion: checked })
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <Label htmlFor="notifyOnVulnerability">
              脆弱性検出時に通知する
            </Label>
            <Switch
              id="notifyOnVulnerability"
              checked={settings.notifyOnVulnerability}
              onCheckedChange={(checked) =>
                setSettings({ ...settings, notifyOnVulnerability: checked })
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <Label htmlFor="autoRemediation">
              可能な場合は自動修正を試みる
            </Label>
            <Switch
              id="autoRemediation"
              checked={settings.autoRemediation}
              onCheckedChange={(checked) =>
                setSettings({ ...settings, autoRemediation: checked })
              }
            />
          </div>
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <div className="flex items-center space-x-2">
              <Clock className="h-4 w-4" />
              <span>最終スキャン: {scanStatus.lastScan}</span>
            </div>
            {scanStatus.isRunning ? (
              <div className="flex items-center space-x-2">
                <span>スキャン中...</span>
                <Progress value={scanStatus.progress} className="w-[100px]" />
              </div>
            ) : null}
          </div>

          <div className="space-y-2">
            <Label>検出された脆弱性</Label>
            <div className="space-y-2">
              {scanStatus.vulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className="flex items-center justify-between p-2 border rounded"
                >
                  <div className="space-y-1">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">{vuln.id}</span>
                      <Badge variant={getSeverityBadgeVariant(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                      {vuln.status === "fixed" ? (
                        <Badge variant="outline" className="text-green-500">
                          <CheckCircle2 className="h-3 w-3 mr-1" />
                          修正済み
                        </Badge>
                      ) : (
                        <Badge variant="outline" className="text-yellow-500">
                          <AlertCircle className="h-3 w-3 mr-1" />
                          未対応
                        </Badge>
                      )}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {vuln.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="flex space-x-2">
          <Button onClick={handleSave} className="flex-1">
            設定を保存
          </Button>
          <Button
            onClick={handleStartScan}
            variant="outline"
            disabled={scanStatus.isRunning}
          >
            今すぐスキャン
          </Button>
        </div>
      </CardContent>
    </Card>
  );
} 