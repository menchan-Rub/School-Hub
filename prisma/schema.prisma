generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  role          String         @default("user")
  accounts      Account[]
  sessions      Session[]
  userSessions  UserSession[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  readAnnouncements AnnouncementRead[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSession {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int?      // セッション時間（分）

  @@index([userId])
  @@index([startTime])
}

model Announcement {
  id          String            @id @default(cuid())
  title       String
  content     String
  priority    Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  readBy      AnnouncementRead[]
}

model AnnouncementRead {
  id             String      @id @default(cuid())
  announcementId String
  userId         String
  readAt         DateTime    @default(now())
  
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@unique([announcementId, userId])
} 