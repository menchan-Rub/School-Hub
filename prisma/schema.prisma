generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  role          String         @default("user")
  mfaEnabled    Boolean       @default(false)
  mfaSecret     String?
  lastPasswordChange DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  userSessions  UserSession[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  readAnnouncements AnnouncementRead[]
  ownedServers  Server[]
  messages      Message[]
  auditLogs     AuditLog[]
  loginAttempts LoginAttempt[]
  lockedAccounts AccountLockout[] @relation("User")
  unlockedAccounts AccountLockout[] @relation("UnlockedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSession {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int?      // セッション時間（分）

  @@index([userId])
  @@index([startTime])
}

model Announcement {
  id          String            @id @default(cuid())
  title       String
  content     String
  priority    Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  readBy      AnnouncementRead[]
}

model AnnouncementRead {
  id             String      @id @default(cuid())
  announcementId String
  userId         String
  readAt         DateTime    @default(now())
  
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@unique([announcementId, userId])
}

model Server {
  id            String    @id @default(cuid())
  name          String
  ownerId       String
  status        String    @default("online")
  memberCount   Int       @default(0)
  messageCount  Int       @default(0)
  boostLevel    Int       @default(0)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  owner         User      @relation(fields: [ownerId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  serverId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  server    Server   @relation(fields: [serverId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  details   String
  adminId   String
  createdAt DateTime @default(now())
  admin     User     @relation(fields: [adminId], references: [id])
}

model SecurityAlert {
  id        String   @id @default(cuid())
  type      String
  message   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemSettings {
  id            Int      @id @default(1)
  maintenance   Boolean  @default(false)
  language      String   @default("ja")
  autoBackup    Boolean  @default(true)
  queryLogging  Boolean  @default(true)
  defaultLocale String   @default("ja-JP")
  timezone      String   @default("Asia/Tokyo")
  updatedAt     DateTime @updatedAt
}

model PasswordPolicy {
  id                    Int      @id @default(1)
  minLength            Int      @default(8)
  maxLength            Int      @default(32)
  requireUppercase     Boolean  @default(true)
  requireLowercase     Boolean  @default(true)
  requireNumbers       Boolean  @default(true)
  requireSpecialChars  Boolean  @default(true)
  passwordHistory      Int      @default(3)
  expiryDays          Int      @default(90)
  updatedAt           DateTime @updatedAt
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String?
  ipAddress String
  success   Boolean
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([ipAddress])
}

model AccountLockout {
  id              String   @id @default(cuid())
  userId          String
  reason          String
  lockedAt        DateTime @default(now())
  unlockAt        DateTime
  unlockedAt      DateTime?
  unlockedBy      String?
  user            User     @relation(fields: [userId], references: [id])
  unlockedByUser  User?    @relation("UnlockedBy", fields: [unlockedBy], references: [id])

  @@index([userId])
}

model IPAllowList {
  id          String   @id @default(cuid())
  ipAddress   String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([ipAddress])
}

model WAFRule {
  id          String   @id @default(cuid())
  name        String
  pattern     String
  action      String   // BLOCK, ALERT, ALLOW
  enabled     Boolean  @default(true)
  priority    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name])
}